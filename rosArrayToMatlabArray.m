% rosArrayToMatlabArray Converts an array of values in a CSV column to an array
%	rosArrayToMatlabArray(input) Converts a string read from a CSV file generated by the bag2csv.py 
%	script to a Matlab array. For instance, converts all of the ranges in a laser scanner message to 
%	an array.
%
%	rosArrayToMatlabArray(input, use_parallel) Turn the use of parallel computing features on or off.

%   Copyright (c) 2014 David Anthony
%
%   This program is free software; you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation; either version 2 of the License, or
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program; if not, write to the Free Software
%   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

function [values] = rosArrayToMatlabArray(input, use_parallel)

if(isempty(input))
	values = [];
	return;
end

% Sets the optional parallel toolbox features to default to on
if(nargin == 1)
	use_parallel = true;
end

% Pre-allocate output variables
num_samples = size(input, 1);
values = nan(num_samples, numel(strsplit(input{1}, '_')));
max_col = size(values, 2);

% Check for availability of parallel computing features
v = ver;
if((use_parallel == true) && any(strcmp('Parallel Computing Toolbox', {v.Name})))
	% Go through all the passed in strings, split on the underscores, and convert them to numeric
	% values
	parfor sample_idx = 1:num_samples
		samples = textscan(input{sample_idx}, '%s', 'delimiter', '_');
		samples = samples{1}';
		sample_val = nan(size(samples));
		
		for sample_val_idx = 1:numel(sample_val)
			sample_val(sample_val_idx) = sscanf(samples{sample_val_idx}, '%f');
		end
		values(sample_idx, :) = sample_val;
	end
else
	for sample_idx = 1:num_samples
		samples = textscan(input{sample_idx}, '%s', 'delimiter', '_');
		samples = samples{1}';
		
		sample_val = nan(size(samples));
		
		for sample_val_idx = 1:numel(sample_val)
			sample_val(sample_val_idx) = sscanf(samples{sample_val_idx}, '%f');
		end
		
		if(numel(sample_val) > max_col)
			values = padarray(values, [0, numel(samples) - max_col], nan, 'post');
			max_col = numel(samples);
		elseif(numel(sample_val) < max_col)
			sample_val = padarray(sample_val, [0, max_col - numel(sample_val)], nan, 'post');
		end
		values(sample_idx, :) = sample_val;
	end
end

% Remove any columns of all invalid entries
values(:, all(isnan(values), 1)) = [];

end